{"ast":null,"code":"import { ref, reactive, computed, onMounted } from 'vue';\nimport { useRouter } from 'vue-router';\nimport RecommendationCard from '@/components/RecommendationCard.vue';\nimport axios from 'axios';\nexport default {\n  name: 'Home',\n  components: {\n    RecommendationCard\n  },\n  setup() {\n    const router = useRouter();\n\n    // Form data\n    const topic = ref('');\n    const subreddit = ref('');\n    const language = ref('pt');\n    const subreddits = ref(['anime', 'manga', 'LightNovels', 'books', 'suggestmeabook', 'MovieSuggestions', 'televisionsuggestions', 'ifyoulikeblank', 'gamesuggestions', 'gamingsuggestions']);\n\n    // UI state\n    const isLoading = ref(false);\n    const showResults = ref(false);\n    const showGenreFilter = ref(false);\n    const selectedGenres = ref([]);\n    const viewMode = ref('grid');\n    const selectedRecommendation = ref(null);\n\n    // Data\n    const recommendations = ref([]);\n    const genres = computed(() => {\n      const allGenres = new Set();\n      recommendations.value.forEach(rec => {\n        if (rec.jikanInfo?.genres && Array.isArray(rec.jikanInfo.genres)) {\n          rec.jikanInfo.genres.forEach(genre => allGenres.add(genre));\n        }\n      });\n      return [...allGenres].sort();\n    });\n\n    // Filtered recommendations\n    const filteredRecommendations = computed(() => {\n      if (selectedGenres.value.length === 0) {\n        return recommendations.value;\n      }\n      return recommendations.value.filter(rec => {\n        if (!rec.jikanInfo?.genres || !Array.isArray(rec.jikanInfo.genres)) return false;\n        return selectedGenres.value.some(genre => rec.jikanInfo.genres.includes(genre));\n      });\n    });\n\n    // Load subreddits on mount\n    onMounted(() => {\n      // Carregar subreddits da API\n      axios.get('/api/subreddits').then(response => {\n        if (response.data && response.data.subreddits) {\n          subreddits.value = response.data.subreddits;\n        }\n      }).catch(error => {\n        console.error('Erro ao carregar subreddits:', error);\n      });\n    });\n\n    // Search Reddit\n    const searchReddit = async () => {\n      if (!topic.value || !subreddit.value) return;\n      isLoading.value = true;\n      showResults.value = false;\n      try {\n        // Fazer chamada para a API\n        const response = await axios.post(`/api/search-and-summarize`, {\n          topic: topic.value,\n          subreddit: subreddit.value,\n          language: language.value\n        });\n        if (response.data && response.data.summary && response.data.summary.recomendacoes) {\n          recommendations.value = response.data.summary.recomendacoes;\n          showResults.value = true;\n        } else if (response.status === 404 || response.data && response.data.error) {\n          alert(`Não foram encontradas recomendações para \"${topic.value}\" em r/${subreddit.value}. Por favor, tente outro tópico ou subreddit.`);\n          recommendations.value = [];\n          showResults.value = false;\n        } else {\n          alert('Não foram encontradas recomendações para esta busca. Tente outro tópico ou subreddit.');\n          recommendations.value = [];\n          showResults.value = false;\n        }\n      } catch (error) {\n        console.error('Error searching Reddit:', error);\n        if (error.response && error.response.status === 404) {\n          alert(`Não foram encontradas recomendações para \"${topic.value}\" em r/${subreddit.value}. Por favor, tente outro tópico ou subreddit.`);\n        } else {\n          alert('Ocorreu um erro ao buscar recomendações. Por favor, tente novamente.');\n        }\n        recommendations.value = [];\n        showResults.value = false;\n      } finally {\n        isLoading.value = false;\n      }\n    };\n\n    // Toggle genre filter dropdown\n    const toggleGenreFilter = () => {\n      showGenreFilter.value = !showGenreFilter.value;\n    };\n\n    // Toggle genre selection\n    const toggleGenre = genre => {\n      const index = selectedGenres.value.indexOf(genre);\n      if (index === -1) {\n        selectedGenres.value.push(genre);\n      } else {\n        selectedGenres.value.splice(index, 1);\n      }\n    };\n\n    // Clear genre filters\n    const clearGenreFilters = () => {\n      selectedGenres.value = [];\n      showGenreFilter.value = false;\n    };\n\n    // Apply filters\n    const applyFilters = () => {\n      showGenreFilter.value = false;\n    };\n\n    // Set view mode\n    const setViewMode = mode => {\n      viewMode.value = mode;\n    };\n\n    // Go to debug page\n    const goToDebug = () => {\n      // Salvar dados para debug\n      const debugData = {\n        topic: topic.value,\n        subreddit: subreddit.value,\n        language: language.value,\n        timestamp: new Date().toISOString(),\n        searchResults: [],\n        aggregatedText: '',\n        aiResponse: {\n          recomendacoes: recommendations.value\n        },\n        jikanData: recommendations.value\n      };\n      localStorage.setItem('debugData', JSON.stringify(debugData));\n      router.push('/debug');\n    };\n\n    // Show recommendation details\n    const showDetails = recommendation => {\n      selectedRecommendation.value = recommendation;\n    };\n\n    // Format number\n    const formatNumber = num => {\n      if (typeof num !== 'number') return num;\n      return num.toFixed(1);\n    };\n    return {\n      // Form data\n      topic,\n      subreddit,\n      language,\n      subreddits,\n      // UI state\n      isLoading,\n      showResults,\n      showGenreFilter,\n      selectedGenres,\n      viewMode,\n      selectedRecommendation,\n      // Data\n      recommendations,\n      genres,\n      filteredRecommendations,\n      // Methods\n      searchReddit,\n      toggleGenreFilter,\n      toggleGenre,\n      clearGenreFilters,\n      applyFilters,\n      setViewMode,\n      goToDebug,\n      showDetails,\n      formatNumber\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","onMounted","useRouter","RecommendationCard","axios","name","components","setup","router","topic","subreddit","language","subreddits","isLoading","showResults","showGenreFilter","selectedGenres","viewMode","selectedRecommendation","recommendations","genres","allGenres","Set","value","forEach","rec","jikanInfo","Array","isArray","genre","add","sort","filteredRecommendations","length","filter","some","includes","get","then","response","data","catch","error","console","searchReddit","post","summary","recomendacoes","status","alert","toggleGenreFilter","toggleGenre","index","indexOf","push","splice","clearGenreFilters","applyFilters","setViewMode","mode","goToDebug","debugData","timestamp","Date","toISOString","searchResults","aggregatedText","aiResponse","jikanData","localStorage","setItem","JSON","stringify","showDetails","recommendation","formatNumber","num","toFixed"],"sources":["/home/geanwork/Documentos/Projetos/Pessoal/reddit-research/src/views/Home.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen flex flex-col\">\n    <!-- Hero Section -->\n    <div class=\"bg-gradient-to-r from-blue-800 to-indigo-900 text-white\">\n      <div class=\"container mx-auto px-4 py-16\">\n        <div class=\"max-w-3xl mx-auto text-center\">\n          <h1 class=\"text-4xl md:text-5xl font-bold mb-4\">RecommendIt</h1>\n          <p class=\"text-xl mb-8\">Descubra novas recomendações baseadas nas discussões do Reddit</p>\n          \n          <!-- Search Form -->\n          <div class=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 shadow-lg\">\n            <form @submit.prevent=\"searchReddit\" class=\"space-y-4\">\n              <div>\n                <label for=\"topic\" class=\"block text-sm font-medium mb-1\">O que você está procurando?</label>\n                <input \n                  type=\"text\" \n                  id=\"topic\" \n                  v-model=\"topic\" \n                  placeholder=\"Ex: animes de ação, livros de ficção científica, jogos de estratégia...\" \n                  class=\"w-full px-4 py-3 rounded-lg bg-white/20 border border-white/30 text-white placeholder-white/70 focus:outline-none focus:ring-2 focus:ring-white/50\"\n                  required\n                >\n              </div>\n              \n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label for=\"subreddit\" class=\"block text-sm font-medium mb-1\">Escolha um subreddit</label>\n                  <div class=\"relative\">\n                    <select \n                      id=\"subreddit\" \n                      v-model=\"subreddit\" \n                      class=\"w-full px-4 py-3 rounded-lg bg-white/20 border border-white/30 text-white appearance-none focus:outline-none focus:ring-2 focus:ring-white/50\"\n                      required\n                    >\n                      <option value=\"\" disabled>Selecione um subreddit</option>\n                      <option v-for=\"sub in subreddits\" :key=\"sub\" :value=\"sub\">r/{{ sub }}</option>\n                    </select>\n                    <div class=\"absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none\">\n                      <i class=\"fas fa-chevron-down text-white/70\"></i>\n                    </div>\n                  </div>\n                </div>\n                \n                <div>\n                  <label for=\"language\" class=\"block text-sm font-medium mb-1\">Idioma das recomendações</label>\n                  <div class=\"relative\">\n                    <select \n                      id=\"language\" \n                      v-model=\"language\" \n                      class=\"w-full px-4 py-3 rounded-lg bg-white/20 border border-white/30 text-white appearance-none focus:outline-none focus:ring-2 focus:ring-white/50\"\n                      required\n                    >\n                      <option value=\"pt\">Português</option>\n                      <option value=\"en\">English</option>\n                      <option value=\"es\">Español</option>\n                      <option value=\"fr\">Français</option>\n                      <option value=\"ja\">日本語</option>\n                    </select>\n                    <div class=\"absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none\">\n                      <i class=\"fas fa-chevron-down text-white/70\"></i>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <button \n                  type=\"submit\" \n                  class=\"w-full px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow transition-colors duration-200 flex items-center justify-center\"\n                  :disabled=\"isLoading\"\n                >\n                  <i class=\"fas fa-search mr-2\"></i>\n                  <span v-if=\"!isLoading\">Buscar Recomendações</span>\n                  <span v-else>Processando...</span>\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Loading Indicator -->\n    <div v-if=\"isLoading\" class=\"flex-1 flex items-center justify-center\">\n      <div class=\"text-center p-8\">\n        <div class=\"inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-600 mb-4\"></div>\n        <p class=\"text-lg text-gray-600\">Analisando discussões do Reddit...</p>\n        <p class=\"text-sm text-gray-500 mt-2\">Isso pode levar alguns segundos</p>\n      </div>\n    </div>\n    \n    <!-- Results Section -->\n    <div v-else-if=\"showResults\" class=\"flex-1 bg-gray-50\">\n      <div class=\"container mx-auto px-4 py-8\">\n        <div class=\"flex flex-col md:flex-row justify-between items-start md:items-center mb-6\">\n          <div>\n            <h2 class=\"text-2xl font-bold text-gray-800 mb-1\">\n              Recomendações para você\n            </h2>\n            <p class=\"text-sm text-gray-600\">\n              <span class=\"font-medium\">Idioma:</span> \n              <span v-if=\"language === 'pt'\">Português</span>\n              <span v-else-if=\"language === 'en'\">English</span>\n              <span v-else-if=\"language === 'es'\">Español</span>\n              <span v-else-if=\"language === 'fr'\">Français</span>\n              <span v-else-if=\"language === 'ja'\">日本語</span>\n              <span v-else>{{ language }}</span>\n            </p>\n          </div>\n          \n          <div class=\"flex flex-wrap gap-2\">\n            <!-- Filter by Genre -->\n            <div class=\"relative\">\n              <button \n                @click=\"toggleGenreFilter\" \n                class=\"px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 flex items-center\"\n              >\n                <i class=\"fas fa-filter mr-2\"></i> Filtrar por Gênero\n                <i class=\"fas fa-chevron-down ml-2 text-xs\"></i>\n              </button>\n              \n              <div \n                v-if=\"showGenreFilter\" \n                class=\"absolute right-0 mt-2 w-64 bg-white rounded-lg shadow-lg z-10 p-3\"\n              >\n                <div class=\"mb-2 pb-2 border-b border-gray-200\">\n                  <div class=\"text-sm font-medium text-gray-700 mb-1\">Gêneros</div>\n                  <div class=\"flex flex-wrap gap-1\">\n                    <button \n                      v-for=\"genre in genres\" \n                      :key=\"genre\"\n                      @click=\"toggleGenre(genre)\"\n                      class=\"px-2 py-1 text-xs rounded-full mb-1\"\n                      :class=\"selectedGenres.includes(genre) ? 'bg-blue-600 text-white' : 'bg-gray-200 text-gray-700'\"\n                    >\n                      {{ genre }}\n                    </button>\n                  </div>\n                </div>\n                <div class=\"flex justify-between\">\n                  <button \n                    @click=\"clearGenreFilters\" \n                    class=\"text-xs text-gray-600 hover:text-gray-800\"\n                  >\n                    Limpar filtros\n                  </button>\n                  <button \n                    @click=\"applyFilters\" \n                    class=\"text-xs text-blue-600 hover:text-blue-800\"\n                  >\n                    Aplicar\n                  </button>\n                </div>\n              </div>\n            </div>\n            \n            <!-- View Mode Toggle -->\n            <div class=\"flex rounded-lg overflow-hidden border border-gray-300\">\n              <button \n                @click=\"setViewMode('grid')\" \n                class=\"px-3 py-2 flex items-center justify-center\"\n                :class=\"viewMode === 'grid' ? 'bg-blue-600 text-white' : 'bg-white text-gray-700'\"\n              >\n                <i class=\"fas fa-th-large\"></i>\n              </button>\n              <button \n                @click=\"setViewMode('list')\" \n                class=\"px-3 py-2 flex items-center justify-center\"\n                :class=\"viewMode === 'list' ? 'bg-blue-600 text-white' : 'bg-white text-gray-700'\"\n              >\n                <i class=\"fas fa-list\"></i>\n              </button>\n            </div>\n            \n            <!-- Debug Mode Button -->\n            <button \n              @click=\"goToDebug\" \n              class=\"px-4 py-2 bg-white border border-gray-300 rounded-lg text-gray-700 flex items-center\"\n            >\n              <i class=\"fas fa-bug mr-2\"></i> Modo Debug\n            </button>\n          </div>\n        </div>\n        \n        <!-- Recommendations Grid/List -->\n        <div \n          :class=\"{ \n            'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6': viewMode === 'grid',\n            'space-y-4': viewMode === 'list'\n          }\"\n        >\n          <div v-if=\"filteredRecommendations.length === 0\" class=\"col-span-full py-8 text-center\">\n            <p class=\"text-lg text-gray-600\">Nenhuma recomendação encontrada com os filtros selecionados.</p>\n            <button \n              @click=\"clearGenreFilters\" \n              class=\"mt-2 text-blue-600 hover:text-blue-800\"\n            >\n              Limpar filtros\n            </button>\n          </div>\n          \n          <recommendation-card \n            v-for=\"recommendation in filteredRecommendations\" \n            :key=\"recommendation.id || recommendation.titulo\" \n            :recommendation=\"recommendation\"\n            :view-mode=\"viewMode\"\n            @click=\"showDetails(recommendation)\"\n            class=\"cursor-pointer\"\n          />\n        </div>\n      </div>\n    </div>\n    \n    <!-- Modal for Recommendation Details -->\n    <div v-if=\"selectedRecommendation\" class=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div class=\"bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden flex flex-col\">\n        <div class=\"p-4 border-b border-gray-200 flex justify-between items-center\">\n          <h3 class=\"text-xl font-bold text-gray-900\">Detalhes da Recomendação</h3>\n          <button @click=\"selectedRecommendation = null\" class=\"text-gray-500 hover:text-gray-700\">\n            <i class=\"fas fa-times\"></i>\n          </button>\n        </div>\n        \n        <div class=\"flex-1 overflow-y-auto p-4\">\n          <div class=\"flex flex-col md:flex-row gap-6\">\n            <!-- Image -->\n            <div class=\"w-full md:w-1/3 flex-shrink-0\">\n              <div class=\"bg-gray-200 rounded-lg overflow-hidden aspect-[3/4]\">\n                <img \n                  v-if=\"selectedRecommendation.jikanInfo?.image_url\" \n                  :src=\"selectedRecommendation.jikanInfo.image_url\" \n                  :alt=\"selectedRecommendation.titulo\"\n                  class=\"w-full h-full object-cover\"\n                />\n                <div v-else class=\"w-full h-full flex items-center justify-center\">\n                  <i class=\"fas fa-image text-gray-400 text-4xl\"></i>\n                </div>\n              </div>\n              \n              <div class=\"mt-4 space-y-2\">\n                <div v-if=\"selectedRecommendation.jikanInfo?.score\" class=\"flex items-center\">\n                  <span class=\"text-amber-500 font-bold text-xl mr-2\">{{ formatNumber(selectedRecommendation.jikanInfo.score) }}</span>\n                  <div class=\"flex\">\n                    <i class=\"fas fa-star text-amber-500\"></i>\n                  </div>\n                </div>\n                \n                <div v-if=\"selectedRecommendation.jikanInfo?.type\" class=\"text-gray-700\">\n                  <span class=\"font-medium\">Tipo:</span> {{ selectedRecommendation.jikanInfo.type }}\n                </div>\n                \n                <div v-if=\"selectedRecommendation.jikanInfo?.episodes\" class=\"text-gray-700\">\n                  <span class=\"font-medium\">Episódios:</span> {{ selectedRecommendation.jikanInfo.episodes }}\n                </div>\n                \n                <div v-if=\"selectedRecommendation.jikanInfo?.year\" class=\"text-gray-700\">\n                  <span class=\"font-medium\">Ano:</span> {{ selectedRecommendation.jikanInfo.year }}\n                </div>\n              </div>\n            </div>\n            \n            <!-- Details -->\n            <div class=\"flex-1\">\n              <h2 class=\"text-2xl font-bold text-gray-900 mb-4\">{{ selectedRecommendation.titulo }}</h2>\n              \n              <div v-if=\"selectedRecommendation.jikanInfo?.synopsis\" class=\"mb-6\">\n                <h4 class=\"text-lg font-medium text-gray-800 mb-2\">Sinopse</h4>\n                <p class=\"text-gray-700\">{{ selectedRecommendation.jikanInfo.synopsis }}</p>\n              </div>\n              \n              <div v-if=\"selectedRecommendation.jikanInfo?.genres && selectedRecommendation.jikanInfo.genres.length\" class=\"mb-6\">\n                <h4 class=\"text-lg font-medium text-gray-800 mb-2\">Gêneros</h4>\n                <div class=\"flex flex-wrap gap-2\">\n                  <span \n                    v-for=\"(genero, index) in selectedRecommendation.jikanInfo.genres\" \n                    :key=\"index\"\n                    class=\"px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm\"\n                  >\n                    {{ genero }}\n                  </span>\n                </div>\n              </div>\n              \n              <div v-if=\"selectedRecommendation.motivos && selectedRecommendation.motivos.length\" class=\"mb-6\">\n                <h4 class=\"text-lg font-medium text-gray-800 mb-2\">Por que recomendamos</h4>\n                <ul class=\"list-disc pl-5 space-y-2\">\n                  <li v-for=\"(razao, index) in selectedRecommendation.motivos\" :key=\"index\" class=\"text-gray-700\">\n                    {{ razao }}\n                  </li>\n                </ul>\n              </div>\n              \n              <div v-if=\"selectedRecommendation.recomendadoPor && selectedRecommendation.recomendadoPor.length\" class=\"mb-6\">\n                <h4 class=\"text-lg font-medium text-gray-800 mb-2\">Recomendado por</h4>\n                <p class=\"text-gray-700\">\n                  Esta recomendação foi mencionada por {{ selectedRecommendation.recomendadoPor.length }} \n                  {{ selectedRecommendation.recomendadoPor.length === 1 ? 'usuário' : 'usuários' }} do Reddit.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class=\"p-4 border-t border-gray-200 flex justify-end\">\n          <button \n            @click=\"selectedRecommendation = null\" \n            class=\"px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg\"\n          >\n            Fechar\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Footer -->\n    <footer class=\"bg-gray-900 text-white py-4\">\n      <div class=\"container mx-auto px-4 text-center\">\n        <p class=\"text-sm\">© 2023 RecommendIt - Todos os direitos reservados</p>\n      </div>\n    </footer>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed, onMounted } from 'vue'\nimport { useRouter } from 'vue-router'\nimport RecommendationCard from '@/components/RecommendationCard.vue'\nimport axios from 'axios'\n\nexport default {\n  name: 'Home',\n  components: {\n    RecommendationCard\n  },\n  setup() {\n    const router = useRouter()\n    \n    // Form data\n    const topic = ref('')\n    const subreddit = ref('')\n    const language = ref('pt')\n    const subreddits = ref([\n      'anime', 'manga', 'LightNovels', 'books', 'suggestmeabook',\n      'MovieSuggestions', 'televisionsuggestions', 'ifyoulikeblank',\n      'gamesuggestions', 'gamingsuggestions'\n    ])\n    \n    // UI state\n    const isLoading = ref(false)\n    const showResults = ref(false)\n    const showGenreFilter = ref(false)\n    const selectedGenres = ref([])\n    const viewMode = ref('grid')\n    const selectedRecommendation = ref(null)\n    \n    // Data\n    const recommendations = ref([])\n    const genres = computed(() => {\n      const allGenres = new Set()\n      recommendations.value.forEach(rec => {\n        if (rec.jikanInfo?.genres && Array.isArray(rec.jikanInfo.genres)) {\n          rec.jikanInfo.genres.forEach(genre => allGenres.add(genre))\n        }\n      })\n      return [...allGenres].sort()\n    })\n    \n    // Filtered recommendations\n    const filteredRecommendations = computed(() => {\n      if (selectedGenres.value.length === 0) {\n        return recommendations.value\n      }\n      \n      return recommendations.value.filter(rec => {\n        if (!rec.jikanInfo?.genres || !Array.isArray(rec.jikanInfo.genres)) return false\n        return selectedGenres.value.some(genre => rec.jikanInfo.genres.includes(genre))\n      })\n    })\n    \n    // Load subreddits on mount\n    onMounted(() => {\n      // Carregar subreddits da API\n      axios.get('/api/subreddits')\n        .then(response => {\n          if (response.data && response.data.subreddits) {\n            subreddits.value = response.data.subreddits;\n          }\n        })\n        .catch(error => {\n          console.error('Erro ao carregar subreddits:', error);\n        });\n    })\n    \n    // Search Reddit\n    const searchReddit = async () => {\n      if (!topic.value || !subreddit.value) return\n      \n      isLoading.value = true\n      showResults.value = false\n      \n      try {\n        // Fazer chamada para a API\n        const response = await axios.post(`/api/search-and-summarize`, {\n          topic: topic.value,\n          subreddit: subreddit.value,\n          language: language.value\n        });\n        \n        if (response.data && response.data.summary && response.data.summary.recomendacoes) {\n          recommendations.value = response.data.summary.recomendacoes;\n          showResults.value = true;\n        } else if (response.status === 404 || (response.data && response.data.error)) {\n          alert(`Não foram encontradas recomendações para \"${topic.value}\" em r/${subreddit.value}. Por favor, tente outro tópico ou subreddit.`);\n          recommendations.value = [];\n          showResults.value = false;\n        } else {\n          alert('Não foram encontradas recomendações para esta busca. Tente outro tópico ou subreddit.');\n          recommendations.value = [];\n          showResults.value = false;\n        }\n      } catch (error) {\n        console.error('Error searching Reddit:', error)\n        if (error.response && error.response.status === 404) {\n          alert(`Não foram encontradas recomendações para \"${topic.value}\" em r/${subreddit.value}. Por favor, tente outro tópico ou subreddit.`);\n        } else {\n          alert('Ocorreu um erro ao buscar recomendações. Por favor, tente novamente.')\n        }\n        recommendations.value = [];\n        showResults.value = false;\n      } finally {\n        isLoading.value = false\n      }\n    }\n    \n    // Toggle genre filter dropdown\n    const toggleGenreFilter = () => {\n      showGenreFilter.value = !showGenreFilter.value\n    }\n    \n    // Toggle genre selection\n    const toggleGenre = (genre) => {\n      const index = selectedGenres.value.indexOf(genre)\n      if (index === -1) {\n        selectedGenres.value.push(genre)\n      } else {\n        selectedGenres.value.splice(index, 1)\n      }\n    }\n    \n    // Clear genre filters\n    const clearGenreFilters = () => {\n      selectedGenres.value = []\n      showGenreFilter.value = false\n    }\n    \n    // Apply filters\n    const applyFilters = () => {\n      showGenreFilter.value = false\n    }\n    \n    // Set view mode\n    const setViewMode = (mode) => {\n      viewMode.value = mode\n    }\n    \n    // Go to debug page\n    const goToDebug = () => {\n      // Salvar dados para debug\n      const debugData = {\n        topic: topic.value,\n        subreddit: subreddit.value,\n        language: language.value,\n        timestamp: new Date().toISOString(),\n        searchResults: [],\n        aggregatedText: '',\n        aiResponse: {\n          recomendacoes: recommendations.value\n        },\n        jikanData: recommendations.value\n      };\n      \n      localStorage.setItem('debugData', JSON.stringify(debugData));\n      router.push('/debug');\n    }\n    \n    // Show recommendation details\n    const showDetails = (recommendation) => {\n      selectedRecommendation.value = recommendation\n    }\n    \n    // Format number\n    const formatNumber = (num) => {\n      if (typeof num !== 'number') return num\n      return num.toFixed(1)\n    }\n    \n    return {\n      // Form data\n      topic,\n      subreddit,\n      language,\n      subreddits,\n      \n      // UI state\n      isLoading,\n      showResults,\n      showGenreFilter,\n      selectedGenres,\n      viewMode,\n      selectedRecommendation,\n      \n      // Data\n      recommendations,\n      genres,\n      filteredRecommendations,\n      \n      // Methods\n      searchReddit,\n      toggleGenreFilter,\n      toggleGenre,\n      clearGenreFilters,\n      applyFilters,\n      setViewMode,\n      goToDebug,\n      showDetails,\n      formatNumber\n    }\n  }\n}\n</script> "],"mappings":"AAoUA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,SAAQ,QAAS,KAAI;AACvD,SAASC,SAAQ,QAAS,YAAW;AACrC,OAAOC,kBAAiB,MAAO,qCAAoC;AACnE,OAAOC,KAAI,MAAO,OAAM;AAExB,eAAe;EACbC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE;IACVH;EACF,CAAC;EACDI,KAAKA,CAAA,EAAG;IACN,MAAMC,MAAK,GAAIN,SAAS,CAAC;;IAEzB;IACA,MAAMO,KAAI,GAAIX,GAAG,CAAC,EAAE;IACpB,MAAMY,SAAQ,GAAIZ,GAAG,CAAC,EAAE;IACxB,MAAMa,QAAO,GAAIb,GAAG,CAAC,IAAI;IACzB,MAAMc,UAAS,GAAId,GAAG,CAAC,CACrB,OAAO,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO,EAAE,gBAAgB,EAC1D,kBAAkB,EAAE,uBAAuB,EAAE,gBAAgB,EAC7D,iBAAiB,EAAE,mBAAkB,CACtC;;IAED;IACA,MAAMe,SAAQ,GAAIf,GAAG,CAAC,KAAK;IAC3B,MAAMgB,WAAU,GAAIhB,GAAG,CAAC,KAAK;IAC7B,MAAMiB,eAAc,GAAIjB,GAAG,CAAC,KAAK;IACjC,MAAMkB,cAAa,GAAIlB,GAAG,CAAC,EAAE;IAC7B,MAAMmB,QAAO,GAAInB,GAAG,CAAC,MAAM;IAC3B,MAAMoB,sBAAqB,GAAIpB,GAAG,CAAC,IAAI;;IAEvC;IACA,MAAMqB,eAAc,GAAIrB,GAAG,CAAC,EAAE;IAC9B,MAAMsB,MAAK,GAAIpB,QAAQ,CAAC,MAAM;MAC5B,MAAMqB,SAAQ,GAAI,IAAIC,GAAG,CAAC;MAC1BH,eAAe,CAACI,KAAK,CAACC,OAAO,CAACC,GAAE,IAAK;QACnC,IAAIA,GAAG,CAACC,SAAS,EAAEN,MAAK,IAAKO,KAAK,CAACC,OAAO,CAACH,GAAG,CAACC,SAAS,CAACN,MAAM,CAAC,EAAE;UAChEK,GAAG,CAACC,SAAS,CAACN,MAAM,CAACI,OAAO,CAACK,KAAI,IAAKR,SAAS,CAACS,GAAG,CAACD,KAAK,CAAC;QAC5D;MACF,CAAC;MACD,OAAO,CAAC,GAAGR,SAAS,CAAC,CAACU,IAAI,CAAC;IAC7B,CAAC;;IAED;IACA,MAAMC,uBAAsB,GAAIhC,QAAQ,CAAC,MAAM;MAC7C,IAAIgB,cAAc,CAACO,KAAK,CAACU,MAAK,KAAM,CAAC,EAAE;QACrC,OAAOd,eAAe,CAACI,KAAI;MAC7B;MAEA,OAAOJ,eAAe,CAACI,KAAK,CAACW,MAAM,CAACT,GAAE,IAAK;QACzC,IAAI,CAACA,GAAG,CAACC,SAAS,EAAEN,MAAK,IAAK,CAACO,KAAK,CAACC,OAAO,CAACH,GAAG,CAACC,SAAS,CAACN,MAAM,CAAC,EAAE,OAAO,KAAI;QAC/E,OAAOJ,cAAc,CAACO,KAAK,CAACY,IAAI,CAACN,KAAI,IAAKJ,GAAG,CAACC,SAAS,CAACN,MAAM,CAACgB,QAAQ,CAACP,KAAK,CAAC;MAChF,CAAC;IACH,CAAC;;IAED;IACA5B,SAAS,CAAC,MAAM;MACd;MACAG,KAAK,CAACiC,GAAG,CAAC,iBAAiB,EACxBC,IAAI,CAACC,QAAO,IAAK;QAChB,IAAIA,QAAQ,CAACC,IAAG,IAAKD,QAAQ,CAACC,IAAI,CAAC5B,UAAU,EAAE;UAC7CA,UAAU,CAACW,KAAI,GAAIgB,QAAQ,CAACC,IAAI,CAAC5B,UAAU;QAC7C;MACF,CAAC,EACA6B,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,CAAC;IACN,CAAC;;IAED;IACA,MAAME,YAAW,GAAI,MAAAA,CAAA,KAAY;MAC/B,IAAI,CAACnC,KAAK,CAACc,KAAI,IAAK,CAACb,SAAS,CAACa,KAAK,EAAE;MAEtCV,SAAS,CAACU,KAAI,GAAI,IAAG;MACrBT,WAAW,CAACS,KAAI,GAAI,KAAI;MAExB,IAAI;QACF;QACA,MAAMgB,QAAO,GAAI,MAAMnC,KAAK,CAACyC,IAAI,CAAC,2BAA2B,EAAE;UAC7DpC,KAAK,EAAEA,KAAK,CAACc,KAAK;UAClBb,SAAS,EAAEA,SAAS,CAACa,KAAK;UAC1BZ,QAAQ,EAAEA,QAAQ,CAACY;QACrB,CAAC,CAAC;QAEF,IAAIgB,QAAQ,CAACC,IAAG,IAAKD,QAAQ,CAACC,IAAI,CAACM,OAAM,IAAKP,QAAQ,CAACC,IAAI,CAACM,OAAO,CAACC,aAAa,EAAE;UACjF5B,eAAe,CAACI,KAAI,GAAIgB,QAAQ,CAACC,IAAI,CAACM,OAAO,CAACC,aAAa;UAC3DjC,WAAW,CAACS,KAAI,GAAI,IAAI;QAC1B,OAAO,IAAIgB,QAAQ,CAACS,MAAK,KAAM,GAAE,IAAMT,QAAQ,CAACC,IAAG,IAAKD,QAAQ,CAACC,IAAI,CAACE,KAAM,EAAE;UAC5EO,KAAK,CAAC,6CAA6CxC,KAAK,CAACc,KAAK,UAAUb,SAAS,CAACa,KAAK,+CAA+C,CAAC;UACvIJ,eAAe,CAACI,KAAI,GAAI,EAAE;UAC1BT,WAAW,CAACS,KAAI,GAAI,KAAK;QAC3B,OAAO;UACL0B,KAAK,CAAC,uFAAuF,CAAC;UAC9F9B,eAAe,CAACI,KAAI,GAAI,EAAE;UAC1BT,WAAW,CAACS,KAAI,GAAI,KAAK;QAC3B;MACF,EAAE,OAAOmB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK;QAC9C,IAAIA,KAAK,CAACH,QAAO,IAAKG,KAAK,CAACH,QAAQ,CAACS,MAAK,KAAM,GAAG,EAAE;UACnDC,KAAK,CAAC,6CAA6CxC,KAAK,CAACc,KAAK,UAAUb,SAAS,CAACa,KAAK,+CAA+C,CAAC;QACzI,OAAO;UACL0B,KAAK,CAAC,sEAAsE;QAC9E;QACA9B,eAAe,CAACI,KAAI,GAAI,EAAE;QAC1BT,WAAW,CAACS,KAAI,GAAI,KAAK;MAC3B,UAAU;QACRV,SAAS,CAACU,KAAI,GAAI,KAAI;MACxB;IACF;;IAEA;IACA,MAAM2B,iBAAgB,GAAIA,CAAA,KAAM;MAC9BnC,eAAe,CAACQ,KAAI,GAAI,CAACR,eAAe,CAACQ,KAAI;IAC/C;;IAEA;IACA,MAAM4B,WAAU,GAAKtB,KAAK,IAAK;MAC7B,MAAMuB,KAAI,GAAIpC,cAAc,CAACO,KAAK,CAAC8B,OAAO,CAACxB,KAAK;MAChD,IAAIuB,KAAI,KAAM,CAAC,CAAC,EAAE;QAChBpC,cAAc,CAACO,KAAK,CAAC+B,IAAI,CAACzB,KAAK;MACjC,OAAO;QACLb,cAAc,CAACO,KAAK,CAACgC,MAAM,CAACH,KAAK,EAAE,CAAC;MACtC;IACF;;IAEA;IACA,MAAMI,iBAAgB,GAAIA,CAAA,KAAM;MAC9BxC,cAAc,CAACO,KAAI,GAAI,EAAC;MACxBR,eAAe,CAACQ,KAAI,GAAI,KAAI;IAC9B;;IAEA;IACA,MAAMkC,YAAW,GAAIA,CAAA,KAAM;MACzB1C,eAAe,CAACQ,KAAI,GAAI,KAAI;IAC9B;;IAEA;IACA,MAAMmC,WAAU,GAAKC,IAAI,IAAK;MAC5B1C,QAAQ,CAACM,KAAI,GAAIoC,IAAG;IACtB;;IAEA;IACA,MAAMC,SAAQ,GAAIA,CAAA,KAAM;MACtB;MACA,MAAMC,SAAQ,GAAI;QAChBpD,KAAK,EAAEA,KAAK,CAACc,KAAK;QAClBb,SAAS,EAAEA,SAAS,CAACa,KAAK;QAC1BZ,QAAQ,EAAEA,QAAQ,CAACY,KAAK;QACxBuC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,aAAa,EAAE,EAAE;QACjBC,cAAc,EAAE,EAAE;QAClBC,UAAU,EAAE;UACVpB,aAAa,EAAE5B,eAAe,CAACI;QACjC,CAAC;QACD6C,SAAS,EAAEjD,eAAe,CAACI;MAC7B,CAAC;MAED8C,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEC,IAAI,CAACC,SAAS,CAACX,SAAS,CAAC,CAAC;MAC5DrD,MAAM,CAAC8C,IAAI,CAAC,QAAQ,CAAC;IACvB;;IAEA;IACA,MAAMmB,WAAU,GAAKC,cAAc,IAAK;MACtCxD,sBAAsB,CAACK,KAAI,GAAImD,cAAa;IAC9C;;IAEA;IACA,MAAMC,YAAW,GAAKC,GAAG,IAAK;MAC5B,IAAI,OAAOA,GAAE,KAAM,QAAQ,EAAE,OAAOA,GAAE;MACtC,OAAOA,GAAG,CAACC,OAAO,CAAC,CAAC;IACtB;IAEA,OAAO;MACL;MACApE,KAAK;MACLC,SAAS;MACTC,QAAQ;MACRC,UAAU;MAEV;MACAC,SAAS;MACTC,WAAW;MACXC,eAAe;MACfC,cAAc;MACdC,QAAQ;MACRC,sBAAsB;MAEtB;MACAC,eAAe;MACfC,MAAM;MACNY,uBAAuB;MAEvB;MACAY,YAAY;MACZM,iBAAiB;MACjBC,WAAW;MACXK,iBAAiB;MACjBC,YAAY;MACZC,WAAW;MACXE,SAAS;MACTa,WAAW;MACXE;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}