{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport TimelineItem from '@/components/TimelineItem.vue';\nexport default {\n  name: 'Debug',\n  components: {\n    TimelineItem\n  },\n  setup() {\n    const route = useRoute();\n\n    // Data from route params\n    const topic = ref(route.query.topic || 'Not specified');\n    const category = ref(route.query.category || 'anime');\n    const language = ref(route.query.language || 'en');\n    const timestamp = ref(new Date().toLocaleString());\n\n    // Status states\n    const redditStatus = ref('waiting');\n    const aggregateStatus = ref('waiting');\n    const aiStatus = ref('waiting');\n    const enrichStatus = ref('waiting');\n\n    // Data\n    const subreddit = ref('');\n    const searchQuery = ref('');\n    const searchResults = ref([]);\n    const commentCount = ref(0);\n    const aggregatedComments = ref('');\n    const recommendations = ref([]);\n    const recommendationsCount = ref(0);\n    const apiName = ref('Jikan API (MyAnimeList)');\n    const enrichedCount = ref(0);\n    const enrichedRecommendations = ref([]);\n\n    // UI\n    const copyButtonText = ref('Copy Text');\n\n    // Copy to clipboard function\n    const copyToClipboard = text => {\n      navigator.clipboard.writeText(text).then(() => {\n        copyButtonText.value = 'Copied!';\n        setTimeout(() => {\n          copyButtonText.value = 'Copy Text';\n        }, 2000);\n      }).catch(err => {\n        console.error('Failed to copy text: ', err);\n        copyButtonText.value = 'Failed to copy';\n        setTimeout(() => {\n          copyButtonText.value = 'Copy Text';\n        }, 2000);\n      });\n    };\n\n    // Load debug data\n    onMounted(() => {\n      // In a real implementation, this would load data from an API or local storage\n      // For now, we'll use mock data\n\n      // Simulate loading data\n      setTimeout(() => {\n        redditStatus.value = 'completed';\n        subreddit.value = 'Animesuggest';\n        searchQuery.value = topic.value;\n        searchResults.value = [{\n          title: 'Looking for anime similar to Attack on Titan',\n          url: '#',\n          commentCount: 45\n        }, {\n          title: 'What are some good psychological anime?',\n          url: '#',\n          commentCount: 32\n        }, {\n          title: 'Recommend me some underrated anime',\n          url: '#',\n          commentCount: 28\n        }];\n        aggregateStatus.value = 'completed';\n        commentCount.value = 105;\n        aggregatedComments.value = 'User1: I highly recommend Death Note if you like psychological anime.\\n\\nUser2: You should check out Steins;Gate, it has a great story and characters.\\n\\nUser3: Fullmetal Alchemist: Brotherhood is a must-watch for any anime fan.';\n        aiStatus.value = 'completed';\n        recommendations.value = [{\n          title: 'Death Note',\n          reasons: ['Psychological thriller with complex characters', 'Strategic mind games similar to what you might enjoy', 'Highly rated in the community']\n        }, {\n          title: 'Steins;Gate',\n          reasons: ['Intricate plot with time travel elements', 'Strong character development', 'Psychological elements that build tension']\n        }];\n        recommendationsCount.value = recommendations.value.length;\n        enrichStatus.value = 'completed';\n        enrichedRecommendations.value = [{\n          title: 'Death Note',\n          image: 'https://cdn.myanimelist.net/images/anime/9/9453.jpg',\n          score: 8.62,\n          year: 2006,\n          genres: ['Mystery', 'Psychological', 'Supernatural', 'Thriller']\n        }, {\n          title: 'Steins;Gate',\n          image: 'https://cdn.myanimelist.net/images/anime/5/73199.jpg',\n          score: 9.08,\n          year: 2011,\n          genres: ['Drama', 'Sci-Fi', 'Thriller']\n        }];\n        enrichedCount.value = enrichedRecommendations.value.length;\n      }, 1000);\n    });\n    return {\n      // Data\n      topic,\n      category,\n      language,\n      timestamp,\n      redditStatus,\n      aggregateStatus,\n      aiStatus,\n      enrichStatus,\n      subreddit,\n      searchQuery,\n      searchResults,\n      commentCount,\n      aggregatedComments,\n      recommendations,\n      recommendationsCount,\n      apiName,\n      enrichedCount,\n      enrichedRecommendations,\n      // Methods\n      copyToClipboard,\n      copyButtonText\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","TimelineItem","name","components","setup","route","topic","query","category","language","timestamp","Date","toLocaleString","redditStatus","aggregateStatus","aiStatus","enrichStatus","subreddit","searchQuery","searchResults","commentCount","aggregatedComments","recommendations","recommendationsCount","apiName","enrichedCount","enrichedRecommendations","copyButtonText","copyToClipboard","text","navigator","clipboard","writeText","then","value","setTimeout","catch","err","console","error","title","url","reasons","length","image","score","year","genres"],"sources":["/home/geanwork/Documentos/Projetos/Pessoal/reddit-research/src/views/Debug.vue"],"sourcesContent":["<template>\n  <div class=\"min-h-screen bg-gray-900 text-white\">\n    <div class=\"container mx-auto px-4 py-8\">\n      <!-- Header -->\n      <div class=\"flex justify-between items-center mb-8\">\n        <h1 class=\"text-2xl font-bold\">Debug Information</h1>\n        <button \n          @click=\"$router.push('/')\" \n          class=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-md transition-colors\"\n        >\n          Back to Results\n        </button>\n      </div>\n      \n      <!-- Timeline -->\n      <div class=\"mb-8\">\n        <h2 class=\"text-xl font-semibold mb-6\">Processing Timeline</h2>\n        \n        <div class=\"space-y-6\">\n          <!-- User Query -->\n          <timeline-item \n            icon=\"search\" \n            title=\"User Query\" \n            :status=\"'completed'\"\n          >\n            <div class=\"space-y-2\">\n              <p><strong>Topic:</strong> \"{{ topic }}\" in category {{ category }}</p>\n              <p><strong>Language:</strong> {{ language }}</p>\n              <p><strong>Timestamp:</strong> {{ timestamp }}</p>\n            </div>\n          </timeline-item>\n          \n          <!-- Reddit Search -->\n          <timeline-item \n            icon=\"reddit\" \n            title=\"Reddit Search\" \n            :status=\"redditStatus\"\n          >\n            <div class=\"space-y-2\">\n              <p><strong>Subreddit:</strong> {{ subreddit }}</p>\n              <p><strong>Search Query:</strong> \"{{ searchQuery }}\"</p>\n              <p><strong>Posts Found:</strong> {{ searchResults.length }}</p>\n              \n              <div v-if=\"searchResults.length > 0\">\n                <h4 class=\"font-medium mt-3 mb-2\">Search Results:</h4>\n                <div class=\"bg-gray-800 p-3 rounded-md max-h-60 overflow-y-auto\">\n                  <ul class=\"list-disc pl-5 space-y-2\">\n                    <li v-for=\"(result, index) in searchResults\" :key=\"index\">\n                      <a \n                        :href=\"result.url\" \n                        target=\"_blank\" \n                        class=\"text-blue-400 hover:underline\"\n                      >\n                        {{ result.title }}\n                      </a>\n                      <span class=\"text-gray-400 text-sm ml-2\">\n                        ({{ result.commentCount }} comments)\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <p v-else class=\"text-yellow-500\">No search results found.</p>\n            </div>\n          </timeline-item>\n          \n          <!-- Comment Aggregation -->\n          <timeline-item \n            icon=\"comments\" \n            title=\"Comment Aggregation\" \n            :status=\"aggregateStatus\"\n          >\n            <div class=\"space-y-2\">\n              <p><strong>Comments Collected:</strong> {{ commentCount }}</p>\n              \n              <div v-if=\"aggregatedComments\">\n                <div class=\"flex justify-between items-center mt-3 mb-2\">\n                  <h4 class=\"font-medium\">Aggregated Text:</h4>\n                  <button \n                    @click=\"copyToClipboard(aggregatedComments)\" \n                    class=\"text-xs px-2 py-1 bg-gray-700 hover:bg-gray-600 rounded\"\n                  >\n                    {{ copyButtonText }}\n                  </button>\n                </div>\n                <div class=\"bg-gray-800 p-3 rounded-md max-h-60 overflow-y-auto\">\n                  <p class=\"whitespace-pre-wrap text-sm\">{{ aggregatedComments }}</p>\n                </div>\n              </div>\n              <p v-else class=\"text-yellow-500\">No comments aggregated.</p>\n            </div>\n          </timeline-item>\n          \n          <!-- AI Analysis -->\n          <timeline-item \n            icon=\"robot\" \n            title=\"AI Analysis\" \n            :status=\"aiStatus\"\n          >\n            <div class=\"space-y-2\">\n              <p><strong>AI Model:</strong> Gemini Pro</p>\n              <p><strong>Recommendations Found:</strong> {{ recommendationsCount }}</p>\n              \n              <div v-if=\"recommendations.length > 0\">\n                <h4 class=\"font-medium mt-3 mb-2\">Identified Recommendations:</h4>\n                <div class=\"bg-gray-800 p-3 rounded-md max-h-60 overflow-y-auto\">\n                  <ul class=\"list-disc pl-5 space-y-3\">\n                    <li v-for=\"(rec, index) in recommendations\" :key=\"index\">\n                      <span class=\"font-medium\">{{ rec.title }}</span>\n                      <ul class=\"list-circle pl-5 mt-1 space-y-1\">\n                        <li v-for=\"(reason, rIndex) in rec.reasons\" :key=\"rIndex\" class=\"text-sm text-gray-300\">\n                          {{ reason }}\n                        </li>\n                      </ul>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <p v-else class=\"text-yellow-500\">No recommendations identified.</p>\n            </div>\n          </timeline-item>\n          \n          <!-- External API Enrichment -->\n          <timeline-item \n            icon=\"database\" \n            title=\"External API Enrichment\" \n            :status=\"enrichStatus\"\n          >\n            <div class=\"space-y-2\">\n              <p><strong>API:</strong> {{ apiName }}</p>\n              <p><strong>Enriched Items:</strong> {{ enrichedCount }}</p>\n              \n              <div v-if=\"enrichedRecommendations.length > 0\">\n                <h4 class=\"font-medium mt-3 mb-2\">Enriched Data:</h4>\n                <div class=\"bg-gray-800 p-3 rounded-md max-h-60 overflow-y-auto\">\n                  <ul class=\"list-disc pl-5 space-y-3\">\n                    <li v-for=\"(rec, index) in enrichedRecommendations\" :key=\"index\">\n                      <div class=\"flex items-start\">\n                        <img \n                          v-if=\"rec.image\" \n                          :src=\"rec.image\" \n                          :alt=\"rec.title\" \n                          class=\"w-16 h-auto rounded mr-3\"\n                        />\n                        <div>\n                          <span class=\"font-medium\">{{ rec.title }}</span>\n                          <div class=\"text-sm text-gray-300 mt-1\">\n                            <p v-if=\"rec.score\">Score: {{ rec.score }}</p>\n                            <p v-if=\"rec.year\">Year: {{ rec.year }}</p>\n                            <p v-if=\"rec.genres && rec.genres.length\">\n                              Genres: {{ rec.genres.join(', ') }}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              <p v-else class=\"text-yellow-500\">No enriched data available.</p>\n            </div>\n          </timeline-item>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted } from 'vue'\nimport { useRoute } from 'vue-router'\nimport TimelineItem from '@/components/TimelineItem.vue'\n\nexport default {\n  name: 'Debug',\n  components: {\n    TimelineItem\n  },\n  setup() {\n    const route = useRoute()\n    \n    // Data from route params\n    const topic = ref(route.query.topic || 'Not specified')\n    const category = ref(route.query.category || 'anime')\n    const language = ref(route.query.language || 'en')\n    const timestamp = ref(new Date().toLocaleString())\n    \n    // Status states\n    const redditStatus = ref('waiting')\n    const aggregateStatus = ref('waiting')\n    const aiStatus = ref('waiting')\n    const enrichStatus = ref('waiting')\n    \n    // Data\n    const subreddit = ref('')\n    const searchQuery = ref('')\n    const searchResults = ref([])\n    const commentCount = ref(0)\n    const aggregatedComments = ref('')\n    const recommendations = ref([])\n    const recommendationsCount = ref(0)\n    const apiName = ref('Jikan API (MyAnimeList)')\n    const enrichedCount = ref(0)\n    const enrichedRecommendations = ref([])\n    \n    // UI\n    const copyButtonText = ref('Copy Text')\n    \n    // Copy to clipboard function\n    const copyToClipboard = (text) => {\n      navigator.clipboard.writeText(text)\n        .then(() => {\n          copyButtonText.value = 'Copied!'\n          setTimeout(() => {\n            copyButtonText.value = 'Copy Text'\n          }, 2000)\n        })\n        .catch(err => {\n          console.error('Failed to copy text: ', err)\n          copyButtonText.value = 'Failed to copy'\n          setTimeout(() => {\n            copyButtonText.value = 'Copy Text'\n          }, 2000)\n        })\n    }\n    \n    // Load debug data\n    onMounted(() => {\n      // In a real implementation, this would load data from an API or local storage\n      // For now, we'll use mock data\n      \n      // Simulate loading data\n      setTimeout(() => {\n        redditStatus.value = 'completed'\n        subreddit.value = 'Animesuggest'\n        searchQuery.value = topic.value\n        searchResults.value = [\n          { title: 'Looking for anime similar to Attack on Titan', url: '#', commentCount: 45 },\n          { title: 'What are some good psychological anime?', url: '#', commentCount: 32 },\n          { title: 'Recommend me some underrated anime', url: '#', commentCount: 28 }\n        ]\n        \n        aggregateStatus.value = 'completed'\n        commentCount.value = 105\n        aggregatedComments.value = 'User1: I highly recommend Death Note if you like psychological anime.\\n\\nUser2: You should check out Steins;Gate, it has a great story and characters.\\n\\nUser3: Fullmetal Alchemist: Brotherhood is a must-watch for any anime fan.'\n        \n        aiStatus.value = 'completed'\n        recommendations.value = [\n          { \n            title: 'Death Note', \n            reasons: [\n              'Psychological thriller with complex characters',\n              'Strategic mind games similar to what you might enjoy',\n              'Highly rated in the community'\n            ]\n          },\n          { \n            title: 'Steins;Gate', \n            reasons: [\n              'Intricate plot with time travel elements',\n              'Strong character development',\n              'Psychological elements that build tension'\n            ]\n          }\n        ]\n        recommendationsCount.value = recommendations.value.length\n        \n        enrichStatus.value = 'completed'\n        enrichedRecommendations.value = [\n          {\n            title: 'Death Note',\n            image: 'https://cdn.myanimelist.net/images/anime/9/9453.jpg',\n            score: 8.62,\n            year: 2006,\n            genres: ['Mystery', 'Psychological', 'Supernatural', 'Thriller']\n          },\n          {\n            title: 'Steins;Gate',\n            image: 'https://cdn.myanimelist.net/images/anime/5/73199.jpg',\n            score: 9.08,\n            year: 2011,\n            genres: ['Drama', 'Sci-Fi', 'Thriller']\n          }\n        ]\n        enrichedCount.value = enrichedRecommendations.value.length\n      }, 1000)\n    })\n    \n    return {\n      // Data\n      topic,\n      category,\n      language,\n      timestamp,\n      redditStatus,\n      aggregateStatus,\n      aiStatus,\n      enrichStatus,\n      subreddit,\n      searchQuery,\n      searchResults,\n      commentCount,\n      aggregatedComments,\n      recommendations,\n      recommendationsCount,\n      apiName,\n      enrichedCount,\n      enrichedRecommendations,\n      \n      // Methods\n      copyToClipboard,\n      copyButtonText\n    }\n  }\n}\n</script>\n\n<style scoped>\n.debug-screen {\n  min-height: 100vh;\n  background-color: #f8f9fa;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}